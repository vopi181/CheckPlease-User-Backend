syntax = "proto3";
option go_package = "github.com/vopi181/CheckPlease-User-Backend/CPUser";
package CPUser;

import "google/protobuf/empty.proto";

// ######### TODOS FOR THIS FILE ##################
// 1. Ensure transition from pass -> sms verification is ironed out
// 2. Credit card types could be better (does exp date need to be a string? no)

service CPUser {
//  rpc Login (LoginRequest) returns (LoginReponse) {}

  // Create User Auth, etc
  rpc CreateUser (CreateUserRequest) returns (AuthTokenResponse) {}
  rpc ReAuthUser (ReAuthUserRequest) returns (AuthTokenResponse) {}
  rpc SMSVerification (VerifySMSRequest) returns (AuthTokenResponse) {}


  rpc GetUserInfo (AuthTokenRequest) returns (UserInfoResponse) {}
  rpc GetUserOrderHistory(AuthTokenRequest) returns (GetUserOrderHistoryResponse) {}
  // # Payment #

  //Maybe wont use this
  rpc PaymentAddCard (PaymentAddCardRequest) returns (PaymentAddCardResponse) {}

  // Order Info
  rpc OrderInitiation (OrderInitiateRequest) returns (OrderInitiateResponse) {}
  rpc OrderPay (OrderPayRequest) returns (OrderPayResponse) {}

  // Selections
  rpc SelectionClick (SelectionRequest) returns (google.protobuf.Empty) {}
  rpc SelectionSubscribe (SelectionCurrentUsersRequest) returns (stream SelectionContainer) {}

  //misc
  rpc Ping (google.protobuf.Empty) returns (PongResponse) {}
}

message PongResponse {
  string pong_message = 1;
}

message CreateUserRequest {
  string phone = 1;
  string fname = 2;
  string lname = 3;
}

message VerifySMSRequest {
  string phone = 1;
  string SMSVerificationToken = 2;
}

message ReAuthUserRequest {
  string phone = 1;
}

message AuthTokenResponse {
  string AuthToken = 1;
}

// Basic Auth Header for requests
message AuthTokenRequest {
  string Token = 1;
}


message UserInfoResponse {
  string fname = 1;
  string lname = 2;
  string pn = 3;
  //PaymentCard pc = 4;
}


// ###### PAY #######
message PaymentAddCardRequest {
    AuthTokenRequest auth_request = 1;
    PaymentCard card = 2;
}

message PaymentAddCardResponse {

}



// ####### SELECTION #######
message SelectionRequest {
  AuthTokenRequest auth_request = 1;
  int64 id = 2;
  string token_code = 3;
  bool is_split = 4;
  bool is_selected = 5;
}

message SelectionCurrentUsersRequest {
  AuthTokenRequest auth_request = 1;
  //table token
  string token_code = 2;
}

message SelectionContainer {
  string fname = 1;
  string lname = 2;
  //item order
  int64 item_id = 3;
  //is split?
  bool is_split = 4;
  bool is_selected = 5;

}

//message SelectionCurrentUsersResponse {
//  SelectionContainer selections = 1;
//}



// ###### ORDERS ######

message OrderInitiateRequest {
  AuthTokenRequest auth_request = 1;
  string table_token = 2;
}

message OrderInitiateResponse {
  Order order = 1;
}

message OrderPayRequest {
  AuthTokenRequest auth_request = 1;
  ItemPay item_pay = 2;
}

message OrderPayResponse {
  bool accepted = 1;
}

message GetUserOrderHistoryResponse {
  repeated OrderItem orders = 1;
}


// ###### TYPES (idk custom messages that are used as subfields) ######

message ItemPay {
  int64 id = 1;
  PaymentCard pc = 2;
  bool split = 3;
}


message OrderItem  {
  string name = 1;
  string type = 2;
  float  cost = 3;
  int64    id = 4;
  bool   paid_for = 5;
  int64  total_splits = 6;
  repeated string paid_by = 7;
  int64 order_id = 8;
  repeated string selected_by = 9;

}

message Order {
  string rest_name = 1;
  int64 order_id = 2;
  repeated OrderItem orders = 3;
}

message PaymentCard {
  string fname = 1;
  string lname = 2;
  string num = 3;
  int32 cvv = 4;
  string exp = 5;
}

